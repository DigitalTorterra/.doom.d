#+TITLE: Doom Emacs Literate Config
#+AUTHOR: Patrick Faley
#+EMAIL: patrick.faley@gmail.com
#+LANGUAGE: en
#+OPTIONS: toc:2

* Introduction
This is my config file for Doom Emacs. More information about creating a literate config can be found [[https://docs.doomemacs.org/latest/modules/config/literate/][here]]. This section just contains some background about various parts of the process.

** Helpful Doom functions
Here is an excerpt from the default ~config.el~ file about some helpful functions:

Here are some additional functions/macros that could help you configure Doom:

- ~load!~ for loading external *.el files relative to this one
- ~use-package!~ for configuring packages
- ~after!~ for running code after a package has loaded
- ~add-load-path!~ for adding directories to the ~load-path~ relative to
  this file. Emacs searches the ~load-path~ when you load packages with
  ~require~ or ~use-package~.
- ~map!~ for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press ~K~ (non-evil users must press ~C-c c k~).
This will open documentation for it, including demos of how they are used.

You can also try ~gd~ (or ~C-c c d~) to jump to their definition and see how
they are implemented.

** Adding Packages to Doom
To install a package with Doom you must declare them here and run ~doom sync~
on the command line, then restart Emacs for the changes to take effect -- or
use ~M-x doom/reload~.

To install SOME-PACKAGE from MELPA, ELPA or emacsmirror: ~(package! some-package)~

To install a package directly from a remote git repo, you must specify a
~:recipe~. You'll find documentation on what ~:recipe~ accepts here:
https://github.com/raxod502/straight.el#the-recipe-format

#+begin_src emacs-lisp :tangle no
(package! another-package
  :recipe (:host github :repo "username/repo"))
#+end_src

If the package you are trying to install does not contain a PACKAGENAME.el
file, or is located in a subdirectory of the repo, you'll need to specify
~:files~ in the ~:recipe~:

#+begin_src emacs-lisp :tangle no
(package! this-package
  :recipe (:host github :repo "username/repo"
           :files ("some-file.el" "src/lisp/*.el")))
#+end_src

If you'd like to disable a package included with Doom, you can do so here
with the `:disable' property: ~(package! builtin-package :disable t)~

You can override the recipe of a built in package without having to specify
all the properties for ~:recipe~. These will inherit the rest of its recipe
from Doom or MELPA/ELPA/Emacsmirror:

#+begin_src emacs-lisp :tangle no
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+end_src

Specify a ~:branch~ to install a package from a particular branch or tag.
This is required for some packages whose default branch isn't 'master' (which
our package manager can't deal with; see raxod502/straight.el#279)

#+begin_src emacs-lisp :tangle no
(package! builtin-package :recipe (:branch "develop"))
#+end_src

Use ~:pin~ to specify a particular commit to install.

#+begin_src emacs-lisp :tangle no
;(package! builtin-package :pin "1a2b3c4d5e")
#+end_src


Doom's packages are pinned to a specific commit and updated from release to
release. The `unpin!' macro allows you to unpin single packages: ~(unpin! pinned-package)~

or multiple packages: ~(unpin! pinned-package another-pinned-package)~

Or *all* packages (NOT RECOMMENDED; will likely break things: ~(unpin! t)~

** Font Configuration
The following is an excerpt from the default ~config.el~ regarding font configuration:

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

- ~doom-font~
- ~doom-variable-pitch-font~
- ~doom-big-font~ - used for ~doom-big-font-mode~; use this for presentations or streaming.

They all accept either a font-spec, font string ~("Input Mono-12")~, or xlfd font string. You generally only need these two:


#+begin_src emacs-lisp  :tangle no
(setq doom-font (font-spec :family "Iosevka Term" :size 22 :weight 'light))
(setq doom-font (font-spec :family "Iosevka Term" :size 32 :weight 'emi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))
(setq doom-font "Iosevka Term")
#+end_src

** About Tangling
Tangling is the process by which an org mode file (like this one) is converted into source files. When Doom is running its sync, it will read in this file, and send all of the code snippets with a language label of ~emacs-lisp~ to their respective files. There are a few different ways to configure this by giving the source block different tags:

- Specifying ~:tangle yes~ will force Doom to tangle a non-elisp block.
- Specifying ~:tangle no~ will make Doom ignore the source block.
- Specifying ~:tangle <filename>~ will tangle to some other file name (the default being ~config.el~).

* DONE Tasks [12/12]
- [X] Add personal information
- [X] Set theme
- [X] Add functionality for line numbers
- [X] Add OS detection/flag
- [X] Make sure Windows Terminal keybindings don't conflict with Emacs
- [X] Transfer knowledge from the built-in comments.
- [X] Add WSL support
  - [X] Add WSL clipboard support
  - [X] Integrate with Chrome browser
- [X] Check if ~(setq display-line-numbers-type t)~ is necessary
- [X] Ensure all custom packages are present
- [X] Configure Vim support [4/4]
  - [X] ~C-a~, ~C-x~ to increment/decrement numbers (use ~g -~ and ~g =~)
  - [X] ~C-k~ to insert digraph numbers
  - [X] ~g j~ and ~g k~ to move wrapped lines
  - [X] Configure syntax highlighting for vimscript
- [X] Python Configuration [1/1]
  - [X] Elpy
- [X] Configure org-mode [4/4]
  - [X] Set directory
  - [X] org-capture
  - [X] Make ~org-sync~ executable from Emacs
  - [X] org-contacts (do in a more Doom-compatible way)

* Bug Fixes
This section contains any code snippets which don't really add any features, but fix some strange quirk in Doom or Emacs.

** Missing ~gitconfig~
This is a strange error which pops up every once in a while. You might notice that none of the ~SPC~ keybindings work. I'm not sure why this code snippet solves it, but it does.

#+begin_src emacs-lisp :tangle packages.el
(package! gitconfig-mode
	  :recipe (:host github :repo "magit/git-modes"
			 :files ("gitconfig-mode.el")))

(package! gitignore-mode
	  :recipe (:host github :repo "magit/git-modes"
			 :files ("gitignore-mode.el")))
#+end_src

* Personal Information
The following command is used to set both name and email address.

#+begin_src emacs-lisp
(setq user-full-name "Patrick Faley"
      user-mail-address "patrick.faley@gmail.com")
#+end_src

* Cosmetics
** Themes
*** New Themes
We install any non-included themes below.

#+begin_src emacs-lisp :tangle packages.el
(package! spacemacs-theme)
#+end_src

*** Default Theme

The default theme can be set using the below command. There are several themes available, including the standard themes, the Doom themes, and any themes installed in ~packages.el~.

#+begin_src emacs-lisp
(setq doom-theme 'doom-one)
#+end_src

The command to change color schemes mid-session is ~load-theme~, which is mapped to ~SPC h t~ by default.

** Line Numbers
The code below is for controlling how line numbers manifest. I enjoy having it so that line numbers are relative in normal mode (to aid with jumps/yanks/etc.) and absolute everywhere else. There are a few steps to enabling this.

The standard (boring) way of doing this can be seen below.

- ~t~: the default, enabling absolute line numbers
- ~relative~: for relative line numbers
- ~nil~: to disable line numbers

#+begin_src emacs-lisp :tangle no
(setq display-line-numbers-type t)
#+end_src

In our fun way, we define a couple functions which call the functions to enable absolute/relative line numbers only if we want to have line numbers enabled (which is tested by the ~display-line-numbers~ variable).

#+begin_src emacs-lisp
(defun safe-enable-relative-line-numbers ()
  "Enable relative line numbers only if line numbers are enabled"
  (if display-line-numbers
      (menu-bar--display-line-numbers-mode-relative)))

(defun safe-enable-absolute-line-numbers ()
  "Enable absolute line numbers only if line numbers are enabled"
  (if display-line-numbers
      (menu-bar--display-line-numbers-mode-absolute)))
#+end_src

Finally, we make it so that these functions are called when transitioning into and out of ~normal~ mode. This is accomplished using "hooks". When certain actions occur, a list of accompanying functions will be run to ensure that the proper context changes occur. The calls to run these functions are called "hooks".

#+begin_src emacs-lisp
(add-hook 'evil-normal-state-entry-hook 'safe-enable-relative-line-numbers)
(add-hook 'evil-normal-state-exit-hook 'safe-enable-absolute-line-numbers)
#+end_src

* Platform-Specific
** WSL
There are a couple of quirks for working with the Windows Subsystem for Linux (WSL), especially in TUI mode.

*** Determining WSL
We use the following flag to determine if we are in WSL. It checks to see if the system is "gnu/linux" and if there is an environment variable present called ~$WSLENV~.

#+begin_src emacs-lisp
(setq using-wsl (and (eq system-type 'gnu/linux)
                     (getenv "WSLENV")))
#+end_src

*** Clipboard
One potential issue is that the Windows clipboard may not link up with the default Emacs kill chain. The following functions allow the user to use Powershell to circumvent this issue.

#+begin_src emacs-lisp
(when using-wsl
    (defun wsl-copy (start end)
    (interactive "r")
    (shell-command-on-region start end "clip.exe")
    (deactivate-mark))

    (defun wsl-paste ()
    (interactive)
    (let ((clipboard
        (shell-command-to-string "powershell.exe -command 'Get-Clipboard' 2> /dev/null")))
        (setq clipboard (replace-regexp-in-string "\r" "" clipboard)) ; Remove Windows ^M characters
        (setq clipboard (substring clipboard 0 -1)) ; Remove newline added by Powershell
        (insert clipboard))))
#+end_src

By default, we will bind these to ~SPC i c~ and ~SPC i w~ respectively.

#+begin_src emacs-lisp
(when using-wsl
    (map! :leader
        :desc "Copy to Windows" "i c" #'wsl-copy)

    (map! :leader
        :desc "Insert from Windows" "i w" #'wsl-paste))
#+end_src

*** Configuring Browser
The following code sets the default browser to the system browser, which enables Emacs to open links in the browser.

#+begin_src emacs-lisp
(when using-wsl
    (let ((cmd-exe "/mnt/c/Windows/System32/cmd.exe")
          (cmd-args '("/c" "start")))
    (when (file-exists-p cmd-exe)
        (setq browse-url-generic-program  cmd-exe
              browse-url-generic-args     cmd-args
              browse-url-browser-function 'browse-url-generic
              search-web-default-browser 'browse-url-generic))))
#+end_src

* Compatibility with Vim
There are some useful things in Vim which can be done in Doom, but may need a slightly different workflow. This section explains some of them, and also contains a couple of new keybindings to bring the two behaviors closer in line to each other.

** Normal Mode Remaps
*** Y
It bothers me that ~Y~ is bound to ~yy~ instead of ~y$~, since ~D~ is ~d$~ and C is ~c$~. There's apparently a reason for it, but it just doesn't make sense to me.

#+begin_src emacs-lisp
(map! :n "Y" 'evil-yank-line)
#+end_src

** Increment/Decrement at Point
In Vim, you can use ~C-a~ and ~C-x~ in Normal mode to increment or decrement at point. In Doom, these are remapped to ~g =~ and ~g -~.

** Digraphs
In Vim, you can use ~C-k~ to enter a digraph insertion menu, which provides a shorthand for the insertion of common non-keyboard symbols using two-key shorthands. The easiest way to replace this in Doom is with ~SPC i u~ which lets you insert any Unicode character based on a search field.

There is also a ~evil-insert-digraph~ function which is not bound to anything by default. We will bind it to ~SPC i d~.

#+begin_src emacs-lisp
(map! :leader
    :desc "Insert digraph" "i d" #'evil-insert-digraph)
#+end_src

** Vimscript Syntax Highlighting
This is mostly just for ~org~ files where we want to store information about Vim learning. Here, we install a plug-in to work with Vimscript files.

#+begin_src emacs-lisp :tangle packages.el
(package! vimrc-mode)
#+end_src

* Org Mode
** Defaults
Here, we set the default directory for Org mode files.

#+begin_src emacs-lisp
(setq org-directory "/home/pfaley/org/")
#+end_src

** LaTeX
Here, we add any code for working with math inside LaTeX.

The below snippet should add LaTeX syntax highlighting.

#+begin_src emacs-lisp
(setq org-highlight-latex-and-related '(latex script entities))
#+end_src

** General Key Bindings
Here, we define any key bindings which are relevant to all of Org Mode.

*** Source Blocks
First, I want to remap the function to insert source blocks, which is ~org-insert-structure-template~. By default, it's ~C-c C-,~, which works fine in most cases, but can have some strange interactions. Here, we can remap it to ~SPC m S~.

#+begin_src emacs-lisp
(map! :leader
    :desc "Insert structure template" "m S" #'org-insert-structure-template)
#+end_src

*** Smart Collapsing
The default function for collapsing a source tree is bound to ~Shift-Tab~. This is great, but sometimes, I just want to fold everything except where I'm currently working. The following function helps for that.

#+begin_src emacs-lisp
(defun org-show-current-heading-tidily ()
  (interactive)
  "Show next entry, keeping other entries closed."
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (show-children))
    (outline-back-to-heading)
    (unless (and (bolp) (org-on-heading-p))
      (org-up-heading-safe)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))
#+end_src

We define the following keybinding for it:

#+begin_src emacs-lisp
(map! :after org
      :leader
      :desc "Fold all but current" "m F" #'org-show-current-heading-tidily)
#+end_src

** Org-Drill
*** Installation
Org Drill is a useful package which extends Org Mode with the ability to use Anki-like spaced repetition flash cards, with all of the definitions and such stored in an Org file. We first install the package below.

#+begin_src emacs-lisp :tangle packages.el
(package! org-drill)
#+end_src

*** Capture Templates
We combine this package with ~org-capture~ to enable the efficient creation of new flashcards. Capture templates can be accessed with ~SPC X~. Doom has some built in. The code below sets a main key as ~d~ to get to the Drill templates, with sub-keys for each specific template.

#+begin_src emacs-lisp
(after! org
  (setq org-capture-templates
        (append org-capture-templates
                ;; This is a grouping of many templates
                `(("d" "Org-Drill Templates")

                ;; This is the beginning of a single template:
                ;; "ds" is the key, "Spanish" is the description,
                ;; `entry` denotes that this has a header
                ;; file+headline specifies to put it in `spanish.org`
                ;; under the "Definitions" headline
                ;; The next line specifies the location of the template
                ("ds" "Spanish" entry
                    (file+headline ,(concat org-directory "flashcards/spanish.org") "Definitions")
                    (file ,(concat org-directory "templates/tpl-spanish.txt")))
                ("de" "English" entry
                    (file+headline ,(concat org-directory "flashcards/english.org") "Definitions")
                    (file ,(concat org-directory "templates/tpl-english.txt")))))))
#+end_src

*** Exporting
In this section, we develop functionality to export an Org file containing flashcards as a CSV file. The purpose of this is that this file can then be imported to other flashcard software like Anki. It will apply to all headers with the ~:drill:~ tag.

#+begin_src emacs-lisp
(setq alist-test '((1 2)
                   (3 4)
                   (5 6)))
(assoc 1 alist-test)

(defun org-drill-export-parse-buffer (body)
  "Parses an AST. Finds relevant headlines, and returns appropriate text"
  1)

(defun org-drill-export-to-csv ()
  "Exports an org-drill buffer to CSV."
  (let ((body (org-element-parse-buffer)))
    3))
#+end_src

** Contact Management
*** ~org-contacts~
I've been experimenting with using the ~org-contacts~ package to manage my contacts. It includes the ability to apply common tags for things like name, email, and number, as well as useful information like birthdays and just general notes. The following code block configures the ~org-contacts~ package.

#+begin_src emacs-lisp
;; Set the file path
(setq org-contacts-dir (concat org-directory "contacts.org"))

;; Initialize the package
(use-package org-contacts
  :ensure nil
  :after org
  :custom (org-contacts-files (list org-contacts-dir)))
#+end_src

*** ~org-ql~

To search through the ~contacts.org~ file, I've been experimenting with ~org-ql~, which uses an unholy amalgamation of Lisp and SQL to allow you to query against an Org file. We install this package with the below code.

#+begin_src emacs-lisp :tangle packages.el
(package! org-ql)
#+end_src

*** CRM
One way I've wanted to expand the capabilities of ~org-contacts~ was to include some sort of CRM (Customer Relationship Management) capabilities. In the following sections, we create such a system.

**** Parameters
We can represent our desired behavior by adding a few different properties and tags to our existing ~contacts.org~ file.

- ~CONTACT-FREQUENCY~ property: We use this to denote how often to contact anybody in our contacts. If this tag is not specified, then the contact will be ignored.
- ~CONTACT-NEXT-DATE~ property: This will be programatically set the date after which this contact should be reached.
- ~CONTACTS-PER-WEEK~ buffer setting: We use this to specify the number of contacts we want to reach out to in any given week.

We define these parameters below:

#+begin_src emacs-lisp
(setq org-crm-indiv-freq "CONTACT-FREQUENCY")
(setq org-crm-indiv-date "CONTACT-NEXT-DATE")
(setq org-crm-global-rate "CONTACTS-PER-WEEK")
#+end_src

We also define a few useful constants below:

#+begin_src emacs-lisp
(setq org-crm-default-date "1970-01-01")
#+end_src

**** Helper Functions
Additionally, we define a few helper functions which wrap the existing ~org-element~ API and make a couple frequent operations more straightforward.

#+begin_src emacs-lisp
;; Key/val accessors
(defun org-element-get-key (body) (org-element-property :key body))
(defun org-element-get-value (body) (org-element-property :value body))

;; Conditional getter
(defun org-element-conditional-access (key body)
  "Get the value of an element if the key matches the desired key"
  (if (string-equal key (org-element-get-key body))
      (org-element-get-value body) nil))

;; Singleton getter
(defun org-element-get-singleton (type body)
  "Extract the first element of some type from a section"
  (car (org-element-map body type (lambda (x) x))))

;; Lisp manipulation
(defun take (n xs)
  "Get the first `n` elements of the list xs"
  (cond ((= 0 n) '())
        ((not xs) '())
        (t (cons (car xs) (take (- n 1) (cdr xs))))))
#+end_src

**** Keyword Parsing
The function below can be used to parse an Org file for the global ~CONTACTS-PER-WEEK~ attribute, which should be set as a keyword with ~#+CONTACTS-PER-WEEK: n~ at the top of a document.

#+begin_src emacs-lisp
(defun org-crm-get-rate ()
  "Parse a buffer to get the CRM rate"
  (let ((res (org-element-map (org-element-parse-buffer) 'keyword
               (lambda (x) (org-element-conditional-access org-crm-global-rate x)))))
    (if res (string-to-number (car res)) nil)))
#+end_src

**** Contact List Generation
The goal of the next blocks of code is to get the names of the people who should be contacted next.

#+begin_src emacs-lisp
;; Handling properties drawer
(defun org-element-get-properties-drawer (body)
  (org-element-get-singleton 'properties-drawer body))

(defun org-element-get-property (key properties)
  "Attempts to get value of property if it exists"
  (car (org-element-map properties 'node-property
         (lambda (x) (org-element-conditional-access key x)))))

(defun org-crm-contact-is-contactable (properties)
  "Returns `t` if contact is contactable, else nil"
  (if (org-element-get-property org-crm-indiv-freq properties) t nil))

(defun org-crm-contact-date (properties)
  "Return target date if set, else nil"
  (org-element-get-property org-crm-indiv-date properties))

(defun org-crm-get-date-if-contactable (body)
  "Get the contact date from the body of a contact if contactable"
  (let ((properties (org-element-get-singleton 'property-drawer body)))
    (if (org-crm-contact-is-contactable properties)
        (let ((contact-date (org-crm-contact-date properties)))
          (if contact-date contact-date org-crm-default-date))
      nil)))

;; Getting Headline Text
(defun org-element-get-headline-title (body)
  "Given a headline, this function returns the title"
  (org-element-property :raw-value body))

;; Headline Parsing
(defun org-crm-parse-headline (body)
  "Returns the name and date of the headline if valid"
  (let ((target-date (org-crm-get-date-if-contactable body))
        (contact-name (org-element-get-headline-title body)))
    (when (and target-date contact-name) (cons contact-name target-date))))

;; Disambiguating
(defun org-crm-prioritize-contacts (c1 c2)
  "A function which acts as a sorter for contacts"
  (let ((c1-name (car c1))
        (c2-name (car c2))
        (c1-date (cdr c1))
        (c2-date (cdr c2)))
    (if (string-equal c1-date c2-date)
        (string-lessp c1-name c2-name)
        (string-lessp c1-date c2-date))))

;; Global Functions
(defun org-crm-get-all-contacts (body)
  "Gets the name/contact date of all relevant contacts"
  (org-element-map body 'headline
    (lambda (x) (org-crm-parse-headline x))))

(defun org-crm-get-n-contacts (body n)
  "Gets the first `n` contacts based on target date"
  (let* ((all-contacts (org-crm-get-all-contacts body))
         (all-contacts-sorted (sort all-contacts (lambda (x1 x2) (org-crm-prioritize-contacts x1 x2)))))
    (take n all-contacts-sorted)))
#+end_src

**** Outline
The plan for this program is described below:

1. Find all contacts with the ~CONTACT-FREQUENCY~ property, which marks them as being people we are interested in contacting
2. Assign unique IDs to all at some point in the process.
3. Sort these contacts according to ~CONTACT-NEXT-DATE~, with uninitialized contacts at the front and ~CONTACT-FREQUENCY~ being a secondary key
4. Choose the first ~CONTACTS-PER-WEEK~ contacts and return them

Note: consider giving each contact a UID to avoid ambiguity?

Useful Functions:
- Entries vs Elements
- [[https://orgmode.org/worg/dev/org-element-api.html][Element API]]
- [[https://orgmode.org/manual/Using-the-Property-API.html][Property API]]
- ~org-map-entries~: iterate through document and apply a function at each entry (for changing parameters)

** Syncing Org Files
As part of my Org file management, I use a Raspberry Pi NAS for keeping a backup of my Org directory and syncing across devices. I initially did this as a shell script, but it would be convenient to have easy integration with Emacs.

First, we define some variables with the location of the remote directory.

#+begin_src emacs-lisp
(setq org-remote-addr "PiNAS")
(setq org-remote-directory "/media/pi/MyExternalDrive/org/")
#+end_src

Next, we define a function to perform the shell calls.

#+begin_src emacs-lisp
(defun org-sync ()
  "Syncs local Org directory with a remote copy."
  (interactive)
  (let* ((remote-path (format "%s:%s" org-remote-addr org-remote-directory))
         (base-command "rsync -havuz")
         (pull-command (format "%s %s %s" base-command remote-path org-directory))
         (push-command (format "%s %s %s" base-command org-directory remote-path)))
    (shell-command pull-command)
    (shell-command push-command)))
#+end_src

Finally, we have some code to bind the function we just created to ~SPC m R~.

#+begin_src emacs-lisp
(map! :leader
    :desc "Sync org directory" "m R" #'org-sync)
#+end_src

* Language-Specific Tweaks
In this section, we perform any customization that is specific to a given programming language.

** Python
By default, Doom provides some decent Python package integration. To get proper use, make sure the following packages are installed with ~pip~:
- ~pytest~: for running tests
- ~nose~: also for running tests
- ~black~: for formatting
- ~pyflakes~: for managing imports
- ~isort~
- ~python-language-server~: for LSP

For help, look at [[https://docs.doomemacs.org/latest/modules/lang/python/][the Doom docs]]. This has the packages to install, as well as a summary of some useful keybindings.

*** Elpy
The default Doom stuff for Python is great. However, it is missing some useful functionality, like integration with the Python REPL for instance. To remedy this, we can use Elpy.

First, we install using the below code block:

#+begin_src emacs-lisp :tangle packages.el
(package! elpy)
#+end_src

Next, we ensure that it loads in at the right time.

#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable))
#+end_src

Finally, we configure the default Python shell:

#+begin_src emacs-lisp
(setq python-shell-interpreter "python"
      python-shell-interpreter-args "-m IPython -i --simple-prompt")
#+end_src

* Other Features
** Typing Tests
This functionality came when I was trying to learn how to type with Colemak-dhm.

#+begin_src emacs-lisp :tangle packages.el
(package! speed-type)
#+end_src

This package has a couple different options. The first is ~M-x speed-type-text~, which loads a generic text to type. Addiionally, ~M-x speed-type-region~ and ~M-x speed-type-buffer~ let you specify what you type.
